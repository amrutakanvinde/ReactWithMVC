@model ReactwithMVC.Models.Note

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>Notes Index</title>
</head>
<body>

    <div id="NotesContainer">

    </div>

</body>
</html>
<script src="https://code.jquery.com/jquery-2.2.0.min.js"></script>

@*ReactJS Library*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.6/react.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.6/react-dom.js"></script>

@*JSX converter(JSX to native javascript)*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>


<script type="text/babel">

    @*class ContainerComponent extends React.Component {*@
    var ContainerComponent = React.createClass({

    getInitialState : function(){
    return{
    serverMessage : []
    };
    },

    componentDidMount : function(){
    //fetch data from server
    $.getJSON('/Notes/GetNotes', function(result){
    if(this.isMounted){
    console.log(result);
    this.setState({
    serverMessage : result
    });
    }
    }.bind(this));
    },

    componentWillUpdate(nextProps, nextState) {
    console.log("Entered will update");
    console.log(nextProps);
    console.log(nextState);
    this.state.serverMessage = nextState;
    console.log(this.state.serverMessage);

    },

    render(){
    console.log("Reached container");

    return(
    <div>
        <h1 align="center"> Welcome to Notes App</h1>
        <HeaderComponent title="Amruta notes" />
        <NoteList serverMessage={this.state.serverMessage} />
        <NoteList title="Note test" />
        <span>

        </span>
    </div>
    );
    }
    });

    class HeaderComponent extends React.Component {
    render() {
    console.log("Reached header");
    return(
    <h1> {this.props.title} </h1>
    );
    }
    }

    class NoteList extends React.Component {
    render() {
    var testServer = []
    var mockServer = this.props.serverMessage
    console.log("Reached TestComponent", this.props.serverMessage);

    @*console.log(this.props.serverMessage);*@
    @*if(mockServer != null){
        for(const [key,value] of mockServer.entries()){
        console.log("entered loop", key,value);
        testServer.push(
        <Note name={value.Name} key={key} />)
        }
        }*@
    if(this.props.serverMessage != null)
    {
    console.log("Test");
    testServer = this.props.serverMessage.map(function(object) {
    console.log(object);
    return (
    <Note name={object.Name} key={object.Id} />
    );
    })
    }

    return(
    <div>
        {testServer}
    </div>

    );

    }
    }


    class Note extends React.Component {
    render() {
    console.log("Reached note");
    return(
    <div id="NotesContainer">
        <label> {this.props.name} </label>
        <button>Edit</button>
        <button>Delete</button>
    </div>
    );
    }
    }

    ReactDOM.render(
    <ContainerComponent />,
    document.getElementById("NotesContainer"));
</script>
